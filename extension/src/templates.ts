// src/templates.ts

export const templates = {
  /**
   * Markdown template for problem descriptions
   */
  markdown: `# {{ title }} (by [Puzzles](https://github.com/michaelfromyeg/vscode-puzzles))

Created: {{ date }}

Source: {{ source }}

ID: {{ id }}

## Puzzle

{{{ problem }}}
`,

  /**
   * Python solution template
   */
  python: `# Auto-generated by Puzzles

def solve():
    """
    Solution to the puzzle.
    """
    pass

def test_solve():
    """
    Test cases for the solution.
    """
    # TODO: Add test cases
    assert True, "Add your test cases here"

if __name__ == '__main__':
    test_solve()
    solve()
`,

  /**
   * JavaScript solution template
   */
  javascript: `// Auto-generated by Puzzles

/**
 * Solution to the puzzle.
 */
function solve() {
  // TODO: Implement solution
}

/**
 * Test cases for the solution.
 */
function testSolve() {
  // TODO: Add test cases
  console.assert(true, "Add your test cases here");
}

if (require.main === module) {
  testSolve();
  solve();
}
`,

  /**
   * TypeScript solution template
   */
  typescript: `// Auto-generated by Puzzles

/**
 * Solution to the puzzle.
 */
function solve(): void {
  // TODO: Implement solution
}

/**
 * Test cases for the solution.
 */
function testSolve(): void {
  // TODO: Add test cases
  console.assert(true, "Add your test cases here");
}

if (require.main === module) {
  testSolve();
  solve();
}
`,

  /**
   * Java solution template
   */
  java: `// Auto-generated by Puzzles

public class Solution {
    public static void solve() {
        // TODO: Implement solution
    }

    public static void testSolve() {
        // TODO: Add test cases
        assert true : "Add your test cases here";
    }

    public static void main(String[] args) {
        testSolve();
        solve();
    }
}
`,

  /**
   * C++ solution template
   */
  cpp: `// Auto-generated by Puzzles

#include <cassert>
#include <iostream>

void solve() {
    // TODO: Implement solution
}

void testSolve() {
    // TODO: Add test cases
    assert(true && "Add your test cases here");
}

int main() {
    testSolve();
    solve();
    return 0;
}
`,
} as const;

/**
 * Get the file extension for a given language
 */
export function getFileExtension(language: keyof typeof templates): string {
  const extensions: Record<string, string> = {
    python: "py",
    javascript: "js",
    typescript: "ts",
    java: "java",
    cpp: "cpp",
  };
  return extensions[language] || "txt";
}

/**
 * Get all supported languages
 */
export function getSupportedLanguages(): (keyof typeof templates)[] {
  return ["python", "javascript", "typescript", "java", "cpp"];
}
